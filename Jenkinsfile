// This Jenkinsfile is used by Jenkins to run the 'DataExport' step of Reactome's release.
// It requires that the 'DiagramConverter' step has been run successfully before it can be run.

import org.reactome.release.jenkins.utilities.Utilities

// Shared library maintained at 'release-jenkins-utils' repository.
def utils = new Utilities()

pipeline{
	agent any
	// Set output folder containing the files generated by this step.
    	environment {
        	OUTPUT_FOLDER = "output"
		ECR_URL = 'public.ecr.aws/reactome/biopax3-exporter'
		CONT_NAME = 'biopax3_exporter_container'
		CONT_ROOT = '/opt/biopax3-exporter'
        }
    
	stages{
		// This stage checks that the upstream project 'DiagramConverter' was run successfully.
		stage('Check BioModels build succeeded'){
			steps{
				script{
				    utils.checkUpstreamBuildsSucceeded("database_updates/job/BioModels")
				}
			}
		}

		stage('Setup: Pull and clean docker environment'){
			steps{
				sh "docker pull ${ECR_URL}:latest"
				sh """
					if docker ps -a --format '{{.Names}}' | grep -Eq '${CONT_NAME}'; then
						docker rm -f ${CONT_NAME}
					fi
				"""
			}
		}
		
		stage('Main: Run BioPax Exporter'){
		    steps{
			script{
			    sh "mkdir -p ${env.OUTPUT_FOLDER}"
			    sh "rm -rf ${env.OUTPUT_FOLDER}/*"
		            withCredentials([usernamePassword(credentialsId: 'neo4jUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
			        sh """\
				    docker run --network=host -v \$(pwd)/${env.OUTPUT_FOLDER}:${CONT_ROOT}/${env.OUTPUT_FOLDER} --name ${CONT_NAME} ${ECR_URL}:latest -h 127.0.0.1 -b 7687 -u $user -p $pass -o ./${env.OUTPUT_FOLDER}'
	                        """
	                        dir(env.OUTPUT_FOLDER) {
	                            sh "zip -r biopax.zip ./*"
                                    sh "sudo chown www-data:reactome biopax.zip"
                                    sh "sudo chmod 775 biopax.zip"
	                        }
			    }
			}
		    }
		}

		stage('Post: Move biopax file to download folder') {
		    steps{
		        script{
		            def releaseVersion = utils.getReleaseVersion()
		            def downloadPath = "${env.ABS_DOWNLOAD_PATH}/${releaseVersion}"
		            sh "mv ${env.OUTPUT_FOLDER}/biopax.zip ${downloadPath}/ "
		        }
		    }
		}
	}
}
